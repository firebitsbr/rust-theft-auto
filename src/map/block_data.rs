// static unit_tex_coords = [
//     // front 
//     [0,0, 1,0, 0,1, 1,1],
//     // right 
//     [0,0, 1,0, 0,1, 1,1],
//     // back 
//     [0,0, 1,0, 0,1, 1,1],
//     // left 
//     [0,0, 1,0, 0,1, 1,1],
//     // bottom 
//     [0,0, 1,0, 0,1, 1,1],
//     // top 
//     [0,0, 1,0, 0,1, 1,1]
// ];

pub fn from_slope_type(s: uint) -> [[[f32, ..3], ..4], ..5] {
    let (z1, z2, z3, z4) = match s {
        1..8 => {
            ((((s - 1) % 2) + ord(s, [1,2,5,6])) / 2,
             (((s - 1) % 2) + ord(s, [1,2,7,8])) / 2,
             (((s - 1) % 2) + ord(s, [3,4,5,6])) / 2,
             (((s - 1) % 2) + ord(s, [3,5,7,8])) / 2)
        },
        9..40 => {
            ((((s - 9) % 8) + ord(s, [9,16,25,32])) / 8,
             (((s - 9) % 8) + ord(s, [9,16,33,40])) / 8,
             (((s - 9) % 8) + ord(s, [17,24,25,32])) / 8,
             (((s - 9) % 8) + ord(s, [17,24,33,40])) / 8)
        },
        41..44 => {
            (ord(s, [41, 43]),
             ord(s, [41, 44]),
             ord(s, [42, 43]),
             ord(s, [42, 44]))
        },
        _ => (1, 1, 1, 1)
    };

    // Face order: front, right, back, left, top
    return [[[-1.0,-1.0, 1.0],[ 1.0,-1.0, 1.0],[-1.0, z3 as f32, 1.0],[ 1.0, z4 as f32, 1.0]],
            [[ 1.0,-1.0, 1.0],[ 1.0,-1.0,-1.0],[ 1.0, z4 as f32, 1.0],[ 1.0, z2 as f32,-1.0]],
            [[ 1.0,-1.0,-1.0],[-1.0,-1.0,-1.0],[ 1.0, z2 as f32,-1.0],[-1.0, z1 as f32,-1.0]],
            [[-1.0,-1.0,-1.0],[-1.0,-1.0, 1.0],[-1.0, z1 as f32,-1.0],[-1.0, z3 as f32, 1.0]],
            [[-1.0, z3 as f32, 1.0],[ 1.0, z4 as f32, 1.0],[-1.0, z1 as f32,-1.0],[ 1.0, z2 as f32,-1.0]]];
}

fn ord(n: uint, v: &[uint]) -> uint {
    if (v.contains(&n)) { 1 } else { 0 }
}
