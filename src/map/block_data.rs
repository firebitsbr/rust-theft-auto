use super::super::renderer::{Vertex};

pub fn from_slope_type(s: uint) -> Vec<Vertex> {
    let t = s as f32;
    let (z1, z2, z3, z4) = match t {
        1.0..8.0 => {
            ((((t - 1.0) % 2.0) + ord(t, [1.0, 2.0, 5.0, 6.0])) / 2.0,
             (((t - 1.0) % 2.0) + ord(t, [1.0, 2.0, 7.0, 8.0])) / 2.0,
             (((t - 1.0) % 2.0) + ord(t, [3.0, 4.0, 5.0, 6.0])) / 2.0,
             (((t - 1.0) % 2.0) + ord(t, [3.0, 5.0, 7.0, 8.0])) / 2.0)
        },
        9.0..40.0 => {
            ((((t - 9.0) % 8.0) + ord(t, [9.0, 16.0, 25.0, 32.0])) / 8.0,
             (((t - 9.0) % 8.0) + ord(t, [9.0, 16.0, 33.0, 40.0])) / 8.0,
             (((t - 9.0) % 8.0) + ord(t, [17.0, 24.0, 25.0, 32.0])) / 8.0,
             (((t - 9.0) % 8.0) + ord(t, [17.0, 24.0, 33.0, 40.0])) / 8.0)
        },
        41.0..44.0 => {
            (ord(t, [41.0, 43.0]),
             ord(t, [41.0, 44.0]),
             ord(t, [42.0, 43.0]),
             ord(t, [42.0, 44.0]))
        },
        _ => (1.0, 1.0, 1.0, 1.0)
    };

    vec![
        // front (0.0, 0.0, 1.0)
        Vertex::new([-1.0, -1.0, 1.0],  [0.0, 0.0]),
        Vertex::new([ 1.0, -1.0, 1.0],  [1.0, 0.0]),
        Vertex::new([ 1.0, z4, 1.0],   [1.0, 1.0]),
        Vertex::new([-1.0, z3, 1.0],   [0.0, 1.0]),
        // back (0.0, 0.0, -1.0)
        Vertex::new([ 1.0, z2, -1.0],  [0.0, 0.0]),
        Vertex::new([-1.0, z1, -1.0],  [1.0, 0.0]),
        Vertex::new([-1.0, -1.0, -1.0], [1.0, 1.0]),
        Vertex::new([ 1.0, -1.0, -1.0], [0.0, 1.0]),
        // right (1.0, 0.0, 0.0)
        Vertex::new([ 1.0, -1.0, -1.0], [0.0, 0.0]),
        Vertex::new([ 1.0, z2, -1.0],  [1.0, 0.0]),
        Vertex::new([ 1.0, z4, 1.0],   [1.0, 1.0]),
        Vertex::new([ 1.0, -1.0, 1.0],  [0.0, 1.0]),
        // left (-1.0, 0.0, 0.0)
        Vertex::new([-1.0, z3, 1.0],   [0.0, 0.0]),
        Vertex::new([-1.0, -1.0, 1.0],  [1.0, 0.0]),
        Vertex::new([-1.0, -1.0, -1.0], [1.0, 1.0]),
        Vertex::new([-1.0, z1, -1.0],  [0.0, 1.0]),
        // top (0.0, 1.0, 0.0)
        Vertex::new([-1.0, z1, -1.0],  [0.0, 0.0]),
        Vertex::new([ 1.0, z2, -1.0],  [1.0, 0.0]),
        Vertex::new([ 1.0, z4, 1.0],   [1.0, 1.0]),
        Vertex::new([-1.0, z3, 1.0],   [0.0, 1.0]),
        // bottom (0.0, -1.0, 0.0)
        Vertex::new([ 1.0, -1.0, 1.0],  [0.0, 0.0]),
        Vertex::new([-1.0, -1.0, 1.0],  [1.0, 0.0]),
        Vertex::new([-1.0, -1.0, -1.0], [1.0, 1.0]),
        Vertex::new([ 1.0, -1.0, -1.0], [0.0, 1.0]),
    ]
}

fn ord(n: f32, v: &[f32]) -> f32 {
    if (v.contains(&n)) { 1.0 } else { -1.0 }
}
